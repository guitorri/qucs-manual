import os
from glob import glob
from collections import defaultdict

# generates
#   quick_reference.rst : Quick Reference
#   component_reference.rst : Component Reference
#   categories_reference.rst : Categories Reference
# from the component icons and data generated by Qucs

def reStSection(fi):
    '''Return a dictionary with key values of the object data table.
    '''

    dat = [line.split(";") for line in open(objData, 'r')][1:]

    out = {}
    for key,value in dat:
        key = key.strip()
        value = value.strip()
        out[key]=value

    return out


def reStSymbol(comp_data, img="png"):
    '''Retuns the reSt code for the component symbol
    '''

    string = ("Symbol\n"
              '""""""\n\n'
              ".. image:: _static/bitmap/%s.%s\n"
              "\n" % (comp_data['Bitmap file'], img) )

    return string


def reStCompData(comp_data):
    '''Retuns the reSt code for the component data
    '''
    string = ("Component Data\n"
              '""""""""""""""\n\n'
              ".. csv-table:: Component Data\n"
              "   :header: Field, Value\n"
              "   :widths: 10, 10\n"
              "   :stub-columns: 1\n"
              "   :delim: ;\n"
              "\n" )

    for key, value in comp_data.iteritems():
        if (key == 'ID'):
            # do not add the (internal) ID key
            continue
        string = string + '   ' + key + '; ' + value + "\n"

    # ground no netlist, sphinx compains
    string = string.replace('````', '')

    return string


def reStCompProp(comp_data):
    '''Retuns the reSt code for the component property list
    '''

    # name of file containing the component properties
    fi = comp_data['ID'] + '_prop.csv'
    cat = comp_data['Category']
    fi = os.path.join(cat, fi)
    props = [line.strip() for line in open(fi, 'r')]

    # no properties (just two line header) Ex. GND
    if len(props) == 2:
        return ""

    # skip header
    props = props[2:]
    props = [' '*3 + prop for prop in props]

    string =( "Component Parameters\n"
              '""""""""""""""""""""\n'
              "\n"
              ".. csv-table:: Default Parameters\n"
              "   :header: Name, Value, Display, Description\n"
              "   :widths: 4, 4, 4, 10\n"
              "   :delim: ;\n"
              "\n" )
    string =  string + "\n".join(props) + "\n"

    # the '-' becomes a two line bullet list
    string = string.replace('; "-"', '; \-')

    return string


def reStLabel(label):
    if label.startswith('_'):
        label = '\\' + label # escape label if it starts with underscore
    return ('\n.. _%s:' % label) # cross reference label


def uniquify_dics_list(seq, key):
    '''uniqify list of dicts
    '''
    # see https://stackoverflow.com/questions/4370660/unique-list-of-dicts-based-on-keys#13780915
    seen = set()
    seen_add = seen.add
    return [x for x in seq if x[key] not in seen and not seen_add(x[key])]


# this is automated
noModify = (
"\n"
".. NOTE: This file was generated automatically, modifications will be lost on update\n"
"   source bitmaps in:    source/_static/bitmaps\n"
"   source data files in: source/component_data/\n"
"   generated by script:  source/component_data/build_component_doc.py\n\n")

# get list of categories as in Qucs
cat_file = "categories.txt"
categories = [line.strip() for line in open(cat_file, 'r')]

comps_data = []
# load all components data in a single list
for cat in categories:
    # skip diagrams
    if (cat == "diagrams"): break
    # load component data for this
    files = os.listdir(cat)
    data = glob(os.path.join(cat,'*data.csv'))
    print "Number of components in %s : %d " %(cat, len(data))
    for objData in data:
        # fech object data as a dictionary
        content = reStSection( objData )
        comps_data.append(content)
        # add ID key to content to easily retrieve the properties file later
        ID = label = os.path.basename( objData ).rsplit("_", 1)[0]
        content['ID'] = ID

#  uniquify, as some components may be in more than one category
uniq_comps_data = uniquify_dics_list(comps_data , 'Bitmap file')
# sort components by Caption (description)
sorted_comps_data = sorted(uniq_comps_data, key=lambda k: k['Caption'])

########################################
# build Categories Reference page
#
categories_data = defaultdict(list)
# build dictionary using Category as key
for comp_data in comps_data:
    # build a dictionary using Identifier (component model) as key
    # get Identifier of component
    id = comp_data['Category'].replace('``', '')
    categories_data[id].append(comp_data)

total = 0
reSt = []
# add no modify note
reSt.append( noModify )
reSt.append(
  "Categories Reference\n"
  "====================\n\n" )

# build components list for every category
for key, valueslist in categories_data.iteritems():

    # Category title
    cat_title = key.title().translate(None,'"').strip()
    reSt.append( cat_title )
    reSt.append( '-'*len(cat_title) + "\n" )
    total += len(valueslist)

    # for every component in the category
    for idx, value in enumerate(valueslist):
        cap = value['Caption']
        des = value['Description']
        label = value['Bitmap file']
        if len(des) > 37:
            des = des[:37]+"..."
        reSt.append("* :ref:`%s <%s>` : %s" % (cap, label, des))

    reSt.append('') # \n

fo = open('../categories_reference.rst', 'w')
for item in reSt:
  fo.write("%s\n" % item)
fo.close()

########################################
# build Component Reference page
#
# Components should be grouped by model, since the model defines the properties.
# Ideally the properties section should be common but at present it's not
# since default properties vaalues can be different for components using the
# same model
#
models_data = defaultdict(list)
# build dictionary using Identifier (component model) as key
for comp_data in uniq_comps_data:
    # build a dictionary using Identifier (component model) as key
    # get Identifier of component
    id = comp_data['Identifier'].replace('``', '')
    models_data[id].append(comp_data)

reSt = []

# add no modify note
reSt.append( noModify )

reSt.append(
  "Component Reference\n"
  "===================\n\n" )

# build components description page
# for every model
for key, valueslist in models_data.iteritems():

    # for every component using that model
    for idx, value in enumerate(valueslist):

         # Component Subsection
        descr = value['Caption'].title()
        # add bitmap file cross-reference label to every component
        bf = value['Bitmap file'].lower()
        # component model as label
        label = key.lower()
        # add model cross-reference label only to first component
        # and only if this label is different from the component model label
        if ((idx == 0) and (label != bf)):
            reSt.append( reStLabel(label) ) # cross reference label

        reSt.append( reStLabel(bf) ) # cross reference label
        reSt.append('') # \n
        reSt.append( descr )
        reSt.append( '^'*len(descr) + "\n" )

        # Symbol
        reSt.append( reStSymbol(value) )

        # Data
        # default data may be different for components using the same model
        # e.g. NPN and PNP BJT
        reSt.append( reStCompData(value) )

        # Props
        # default properties values may be different for components using the same model
        reSt.append( reStCompProp(value) )

        # add additional notes from external file, if available
        fn = 'component_notes/%s.rst' % label
        if (os.path.isfile('../' + fn) ):
            reSt.append( '.. include:: %s' % fn)

        # add transition marker (horizontal line)
        reSt.append( '\n----\n')

    # document may not end with a transition
    del reSt[-1]

print "Total number of components: ", total

fo = open('../component_reference.rst', 'w')
for item in reSt:
  fo.write("%s\n" % item)
fo.close()


########################################
# build Quick Reference page
#
quick_reference = []
quick_reference.append( noModify )
quick_reference.append(
  "Quick Reference\n"
  "===============\n\n"
  "The table below is a quick summary of the %i components currently available in Qucs.\n"
  "\n"
  ".. csv-table:: Schematic Entry Quick Reference\n"
  "   :header: Device, Schematic Entry, Netlist Entry, Description\n"
  "   :widths: 30, 15, 15, 40\n"
  "   :delim: ;\n\n" %(total) )

for comp_data in sorted_comps_data:
    cap = comp_data['Caption']
    lbl = comp_data['Bitmap file']
    sch = comp_data['Identifier']
    net = comp_data['Default name'].replace('````', '') # gnd has no entry
    des = comp_data['Description']
    if len(des) > 37:
        des = des[:37]+"..."

    # build quick reference table
    # add cross-reference    :ref:`displayed text <label>`
    # caption<crossref_label>, Schematic Entry, Netlist Entry, Description
    quick_reference.append( "   :ref:`%s <%s>`; %s; %s; %s"
                            %(cap, lbl, sch, net, des) )

fo2 = open('../quick_reference.rst', 'w')
for item in quick_reference:
  fo2.write("%s\n" % item)
fo2.close()
